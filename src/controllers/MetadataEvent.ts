import { SQL, Encrypt, Decrypt } from '../index'
import { 
	d, Schema, Property, Description, Retype, Route, Throws, 
	Path, BadRequest, NotFound, AuthorizationFailed, Auth,
	Enum, Ownership, Identifier, Parent, Body, Double, Timestamp
} from '../utils/OpenAPI'
import { IResult } from 'mssql'

import { Participant } from './Participant'
import { Study } from './Study'
import { Researcher } from './Researcher'

export enum MetadataEventType {
	Tap = 'tap',
	Page = 'page',
	Notification = 'notification',
	Error = 'error'
}
Enum(MetadataEventType, d`
	The kind of interaction the metadata event contains.
`)

@Schema()
@Parent(Participant)
@Description(d`
	An event generated by a participant interacting with the LAMP app.
`)
export class MetadataEvent {

	@Property()
	@Description(d`
		The self-referencing identifier to this object.
	`)
	public id?: Identifier

	@Property()
	@Description(d`
		External or out-of-line objects attached to this object.
	`)
	public attachments?: any

	@Property()
	@Description(d`
		The date and time when this event was recorded.
	`)
	public timestamp?: Timestamp

	@Property()
	@Description(d`
		The type of the metadata event.
	`)
	public type?: MetadataEventType

	@Property()
	@Description(d`
		The item information recorded within the metadata event.
	`)
	public item?: string

	@Route.POST('/participant/{participant_id}/metadata_event') 
	@Description(d`
		Create a new MetadataEvent for the given Participant.
	`)
	@Auth(Ownership.Self, 'participant_id')
	@Retype(Identifier, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async create(

		@Path('participant_id')
		@Retype(Identifier, Participant)
		participant_id: string,

		@Body()
		metadata_event: MetadataEvent,

	): Promise<Identifier> {
		return MetadataEvent._insert(participant_id, metadata_event)
	}

	@Route.PUT('/metadata_event/{metadata_event_id}') 
	@Description(d`
		Update the metadata event.
	`)
	@Auth(Ownership.Self, 'metadata_event_id')
	@Retype(Identifier, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async update(

		@Path('metadata_event_id')
		@Retype(Identifier, MetadataEvent)
		metadata_event_id: string,

		@Body()
		metadata_event: MetadataEvent,

	): Promise<Identifier> {
		return MetadataEvent._update(metadata_event_id, metadata_event)
	}

	@Route.DELETE('/metadata_event/{metadata_event_id}') 
	@Description(d`
		Delete the metadata event.
	`)
	@Auth(Ownership.Self, 'metadata_event_id')
	@Retype(Identifier, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async delete(

		@Path('metadata_event_id')
		@Retype(Identifier, MetadataEvent)
		metadata_event_id: string

	): Promise<Identifier> {
		return MetadataEvent._delete(metadata_event_id)
	}

	@Route.GET('/metadata_event/{metadata_event_id}') 
	@Description(d`
		Get a single metadata event, by identifier.
	`)
	@Auth(Ownership.Self, 'metadata_event_id')
	@Retype(Array, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async view(

		@Path('metadata_event_id')
		@Retype(Identifier, MetadataEvent)
		metadata_event_id: string

	): Promise<MetadataEvent[]> {
		return MetadataEvent._select(metadata_event_id)
	}

	@Route.GET('/participant/{participant_id}/metadata_event') 
	@Description(d`
		Get the set of all metadata events for a single participant.
	`)
	@Auth(Ownership.Parent, 'participant_id')
	@Retype(Array, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all_by_participant(

		@Path('participant_id')
		@Retype(Identifier, Participant)
		participant_id: string

	): Promise<MetadataEvent[]> {
		return MetadataEvent._select(participant_id)
	}

	@Route.GET('/study/{study_id}/metadata_event') 
	@Description(d`
		Get the set of all metadata events produced by participants 
		participants of a single study, by study identifier.
	`)
	@Auth(Ownership.Parent, 'study_id')
	@Retype(Array, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all_by_study(

		@Path('study_id')
		@Retype(Identifier, Study)
		study_id: string

	): Promise<MetadataEvent[]> {
		return MetadataEvent._select(study_id)
	}

	@Route.GET('/researcher/{researcher_id}/metadata_event') 
	@Description(d`
		Get the set of all metadata events produced by participants 
		of any study conducted by a researcher, by researcher identifier.
	`)
	@Auth(Ownership.Parent, 'researcher_id')
	@Retype(Array, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all_by_researcher(

		@Path('researcher_id')
		@Retype(Identifier, Researcher)
		researcher_id: string

	): Promise<MetadataEvent[]> {
		return MetadataEvent._select(researcher_id)
	}

	@Route.GET('/metadata_event') 
	@Description(d`
		Get the set of all metadata events for any participant.
	`)
	@Auth(Ownership.Root)
	@Retype(Array, MetadataEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all(

	): Promise<MetadataEvent[]> {
		return MetadataEvent._select()
	}

	/**
	 *
	 */
	public static _pack_id(components: {

		/**
		 * 
		 */
		event_id?: number

	}): Identifier {
		return Identifier.pack([
			(<any>MetadataEvent).name, 
			components.event_id || 0,
		])
	}

	/**
	 *
	 */
	public static _unpack_id(id: Identifier): ({

		/**
		 * 
		 */
		event_id: number

	}) {
		let components = Identifier.unpack(id)
		if (components[0] !== (<any>MetadataEvent).name)
			throw new Error('invalid identifier')
		let result = components.slice(1).map(parseInt)
		return {
			event_id: !isNaN(result[0]) ? result[0] : 0
		}
	}

	/**
	 *
	 */
	public static async _parent_id(id: Identifier, type: Function): Promise<Identifier | undefined> {
		let { event_id } = MetadataEvent._unpack_id(id)
		switch (type) {
			default: throw new Error()
		}
	}

	/**
	 * Get a set of `MetadataEvent`s matching the criteria parameters.
	 */
	private static async _select(

		/**
		 * 
		 */
		id?: Identifier

	): Promise<MetadataEvent[]> {

		// Get the correctly scoped identifier to search within.
		let user_id: string | undefined
		let admin_id: number | undefined
		let metadata_id: number | undefined
		if (!!id && Identifier.unpack(id)[0] === (<any>Researcher).name)
			admin_id = Researcher._unpack_id(id).admin_id
		else if (!!id && Identifier.unpack(id)[0] === (<any>Study).name)
			admin_id = Study._unpack_id(id).admin_id
		else if (!!id && Identifier.unpack(id).length === 0 /* Participant */)
			user_id = Participant._unpack_id(id).study_id
		else if (!!id && Identifier.unpack(id)[0] === (<any>MetadataEvent).name)
			metadata_id = MetadataEvent._unpack_id(id).event_id
		else if(!!id) throw new Error()

		// TODO
		return []
	}

	/**
	 * Create a `MetadataEvent` with a new object.
	 */
	private static async _insert(

		/**
		 * The `StudyId` column of the `Users` table in the LAMP v0.1 DB.
		 */
		participant_id: Identifier,

		/**
		 * The new object.
		 */
		object: MetadataEvent

	): Promise<Identifier> {

		// TODO
		throw new Error()
		return ''
	}

	/**
	 * Update a `MetadataEvent` with new fields.
	 */
	private static async _update(

		/**
		 * The `?` column of the `?` table in the LAMP_Aux DB.
		 */
		event_id: Identifier,

		/**
		 * The replacement object or specific fields within.
		 */
		object: MetadataEvent

	): Promise<Identifier> {

		// TODO
		throw new Error()
		return ''
	}

	/**
	 * Delete a `MetadataEvent` row.
	 */
	private static async _delete(

		/**
		 * The `?` column of the `?` table in the LAMP_Aux DB.
		 */
		event_id: Identifier

	): Promise<Identifier> {

		// TODO
		throw new Error()
		return ''
	}
}
