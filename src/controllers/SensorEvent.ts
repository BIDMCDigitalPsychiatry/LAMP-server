import { SQL, Encrypt, Decrypt } from '../index'
import { 
	d, Schema, Property, Description, Retype, Route, Throws, 
	Path, BadRequest, NotFound, AuthorizationFailed, Auth,
	Enum, Ownership, Identifier, Parent, Body, Double, Timestamp
} from '../utils/OpenAPI'
import { IResult } from 'mssql'

import { Participant } from './Participant'
import { Study } from './Study'
import { Researcher } from './Researcher'

@Schema()
@Parent(Participant)
@Description(d`
	An event generated by a participant interacting with the LAMP app.
`)
export class SensorEvent {

	@Property()
	@Description(d`
		The self-referencing identifier to this object.
	`)
	public id?: Identifier

	@Property()
	@Description(d`
		External or out-of-line objects attached to this object.
	`)
	public attachments?: any

	@Property()
	@Description(d`
		The date and time when this event was recorded.
	`)
	public timestamp?: Timestamp

	@Property()
	@Description(d`
		The type of the sensor event.
	`)
	public sensor_name?: string

	@Property()
	@Description(d`
		The item information recorded within the sensor event.
	`)
	public data?: any

	@Route.POST('/participant/{participant_id}/sensor_event') 
	@Description(d`
		Create a new SensorEvent for the given Participant.
	`)
	@Auth(Ownership.Self, 'participant_id')
	@Retype(Identifier, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async create(

		@Path('participant_id')
		@Retype(Identifier, Participant)
		participant_id: string,

		@Body()
		sensor_event: SensorEvent,

	): Promise<Identifier> {
		return SensorEvent._insert(participant_id, sensor_event)
	}

	@Route.PUT('/sensor_event/{sensor_event_id}') 
	@Description(d`
		Update a sensor event.
	`)
	@Auth(Ownership.Self, 'sensor_event_id')
	@Retype(Identifier, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async update(

		@Path('sensor_event_id')
		@Retype(Identifier, SensorEvent)
		sensor_event_id: string,

		@Body()
		sensor_event: SensorEvent,

	): Promise<Identifier> {
		return SensorEvent._update(sensor_event_id, sensor_event)
	}

	@Route.DELETE('/sensor_event/{sensor_event_id}') 
	@Description(d`
		Delete a sensor event.
	`)
	@Auth(Ownership.Self, 'sensor_event_id')
	@Retype(Identifier, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async delete(

		@Path('sensor_event_id')
		@Retype(Identifier, SensorEvent)
		sensor_event_id: string

	): Promise<Identifier> {
		return SensorEvent._delete(sensor_event_id)
	}

	@Route.GET('/sensor_event/{sensor_event_id}') 
	@Description(d`
		Get a single sensor event, by identifier.
	`)
	@Auth(Ownership.Self, 'sensor_event_id')
	@Retype(Array, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async view(

		@Path('sensor_event_id')
		@Retype(Identifier, SensorEvent)
		sensor_event_id: string

	): Promise<SensorEvent[]> {
		return SensorEvent._select(sensor_event_id)
	}

	@Route.GET('/participant/{participant_id}/sensor_event') 
	@Description(d`
		Get the set of all sensor events produced by the given participant.
	`)
	@Auth(Ownership.Parent, 'participant_id')
	@Retype(Array, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all_by_participant(

		@Path('participant_id')
		@Retype(Identifier, Participant)
		participant_id: string

	): Promise<SensorEvent[]> {
		return SensorEvent._select(participant_id)
	}

	@Route.GET('/study/{study_id}/sensor_event') 
	@Description(d`
		Get the set of all sensor events produced by participants 
		participants of a single study, by study identifier.
	`)
	@Auth(Ownership.Parent, 'study_id')
	@Retype(Array, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all_by_study(

		@Path('study_id')
		@Retype(Identifier, Study)
		study_id: string

	): Promise<SensorEvent[]> {
		return SensorEvent._select(study_id)
	}

	@Route.GET('/researcher/{researcher_id}/sensor_event') 
	@Description(d`
		Get the set of all sensor events produced by participants 
		of any study conducted by a researcher, by researcher identifier.
	`)
	@Auth(Ownership.Parent, 'researcher_id')
	@Retype(Array, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all_by_researcher(

		@Path('researcher_id')
		@Retype(Identifier, Researcher)
		researcher_id: string

	): Promise<SensorEvent[]> {
		return SensorEvent._select(researcher_id)
	}

	@Route.GET('/sensor_event') 
	@Description(d`
		Get the set of all sensor events produced by any participant.
	`)
	@Auth(Ownership.Root)
	@Retype(Array, SensorEvent)
	@Throws(BadRequest, AuthorizationFailed, NotFound)
	public static async all(

	): Promise<SensorEvent[]> {
		return SensorEvent._select()
	}

	/**
	 *
	 */
	public static _pack_id(components: {

		/**
		 * 
		 */
		event_id?: number

	}): Identifier {
		return Identifier.pack([
			(<any>SensorEvent).name, 
			components.event_id || 0,
		])
	}

	/**
	 *
	 */
	public static _unpack_id(id: Identifier): ({

		/**
		 * 
		 */
		event_id: number

	}) {
		let components = Identifier.unpack(id)
		if (components[0] !== (<any>SensorEvent).name)
			throw new Error('invalid identifier')
		let result = components.slice(1).map(parseInt)
		return {
			event_id: !isNaN(result[0]) ? result[0] : 0
		}
	}

	/**
	 *
	 */
	public static async _parent_id(id: Identifier, type: Function): Promise<Identifier | undefined> {
		let { event_id } = SensorEvent._unpack_id(id)
		switch (type) {
			default: throw new Error()
		}
	}

	/**
	 * Get a set of `SensorEvent`s matching the criteria parameters.
	 */
	private static async _select(

		/**
		 * 
		 */
		id?: Identifier

	): Promise<SensorEvent[]> {

		// Get the correctly scoped identifier to search within.
		let user_id: string | undefined
		let admin_id: number | undefined
		let sensor_id: number | undefined
		if (!!id && Identifier.unpack(id)[0] === (<any>Researcher).name)
			admin_id = Researcher._unpack_id(id).admin_id
		else if (!!id && Identifier.unpack(id)[0] === (<any>Study).name)
			admin_id = Study._unpack_id(id).admin_id
		else if (!!id && Identifier.unpack(id).length === 0 /* Participant */)
			user_id = Participant._unpack_id(id).study_id
		else if (!!id && Identifier.unpack(id)[0] === (<any>SensorEvent).name)
			sensor_id = SensorEvent._unpack_id(id).event_id
		else if(!!id) throw new Error()

		// TODO
		return []
	}

	/**
	 * Create a `SensorEvent` with a new object.
	 */
	private static async _insert(

		/**
		 * The `StudyId` column of the `Users` table in the LAMP v0.1 DB.
		 */
		participant_id: Identifier,

		/**
		 * The new object.
		 */
		object: SensorEvent

	): Promise<Identifier> {

		// TODO
		throw new Error()
		return ''
	}

	/**
	 * Update a `SensorEvent` with new fields.
	 */
	private static async _update(

		/**
		 * The `?` column of the `?` table in the LAMP_Aux DB.
		 */
		event_id: Identifier,

		/**
		 * The replacement object or specific fields within.
		 */
		object: SensorEvent

	): Promise<Identifier> {

		// TODO
		throw new Error()
		return ''
	}

	/**
	 * Delete a `SensorEvent` row.
	 */
	private static async _delete(

		/**
		 * The `?` column of the `?` table in the LAMP_Aux DB.
		 */
		event_id: Identifier

	): Promise<Identifier> {

		// TODO
		throw new Error()
		return ''
	}
}
